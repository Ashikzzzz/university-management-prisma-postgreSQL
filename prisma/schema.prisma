// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id String @id @default(uuid())
  year Int
  title String
  code String
  startMonth String
  endMonth String
  isCurrent Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students Student[]
  semesterRegistration SemesterRegistration[]
  studentEnrollerdCourse StudentEnrollerdCourse[]
  studentEnrolledCourseMark StudentEnrolledCourseMark[]
  studentSemesterPayment StudentSemesterPayment[]
  @@map("academic_semesters")
}

model AcademicFaculty {
   id String @id @default(uuid())
   title String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   academicDepartments AcademicDepartment[]
   students Student[]
   faculty Faculty[]

   @@map("academic_faculty")
}

model AcademicDepartment {
   id String @id @default(uuid())
   title String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
   academicFacultyId String
   students Student[]
   faculty Faculty[]
   offeredCourse OfferedCourse[]



   @@map("academic_department")
}

model Student {
   id String @id @default(uuid())
   student_id String
   firstName String
   lastName String
   middleName String
   profileImage String
   email String
   contactNo String
   gender String
   bloodGroup String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   academicSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
   academicSemesterId String

   academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])
   academicDepartmentId String

   academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
   academicFacultyId String

   studentSemesterRegistration StudentSemesterRegistration[]
   studentRegistrationCourse StudentRegistrationCourse[]
   studentEnrollerdCourse StudentEnrollerdCourse[]
   studentEnrolledCourseMark StudentEnrolledCourseMark[]
   studentSemesterPayment StudentSemesterPayment[]
 
   @@map("students")
}

model Faculty {
     id String @id @default(uuid())
     faculty_id String
     firstName String
     lastName String
     middleName String
     profileImage String
     email String
     contactNo String
     gender String
     bloodGroup String
     designation String
     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
     academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])
     academicDepartmentId String

     academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
     academicFacultyId String

    courses CourseFaculty[]
    offeredCourseClassSchedule OfferedCourseClassSchedule[]

     @@map("faculty")
}

model Building {
       id String @id @default(uuid())   
        title String   
        createdAt DateTime @default(now()) 
        updatedAt DateTime @updatedAt   
        rooms Room[]  
        @@map("building") 
       }  
       
    model Room {  
    id String @id @default(uuid())     
    roomNumber String     
    floor String     
    createdAt DateTime @default(now())     
    updatedAt DateTime @updatedAt    
    building Building @relation(fields: [buildingId],references: [id])      
    buildingId String   
    offeredCourseClassSchedule  OfferedCourseClassSchedule[]
    @@map("rooms")
       }


model Course {
   id String @id @default(uuid())
   title String
   code String
   credits Int
   createdAt DateTime @default(now())     
   updatedAt DateTime @updatedAt
   preRequisite CourseToPreRequisite[] @relation("courseToPrerequisite")
   preRequisiteFor CourseToPreRequisite[] @relation("PrerequisiteToCourse")
   faculties CourseFaculty[]
   offeredCourse OfferedCourse[]
   studentEnrollerdCourse StudentEnrollerdCourse[]
   @@map("course")      
}

model CourseToPreRequisite {
  courseId String
  course Course @relation(fields: [courseId],references: [id], name: "courseToPrerequisite")

  preRequisiteId String
  preRequisite Course @relation(fields: [preRequisiteId],references: [id], name: "PrerequisiteToCourse")

  @@id([courseId,preRequisiteId])
}

model CourseFaculty {
  courseId String
  course Course @relation(fields: [courseId],references: [id])
  facultyId String
  faculty Faculty @relation(fields: [facultyId],references: [id])

  @@id([courseId,facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
 id String @id @default(uuid())
 startDate DateTime
 endDate DateTime
 status SemesterStatus
 minCredit Int @default(0)
 maxCredit Int @default(0)
 createdAt DateTime @default(now())     
 updatedAt DateTime @updatedAt
 academicSemesterId String
 academicSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
 offeredCourse OfferedCourse[]
 offeredCourseSection OfferedCourseSection[]
 offeredCourseClassSchedule OfferedCourseClassSchedule[]
 studentSemesterRegistration StudentSemesterRegistration[]
 studentRegistrationCourse StudentRegistrationCourse[]
 @@map("senester_registration")
}

enum SemesterStatus{
  UPCOMING
  ONGOING
  ENDED
}

model OfferedCourse{
 id String @id @default(uuid())
 createdAt DateTime @default(now())     
 updatedAt DateTime @updatedAt

 courseId String
 course Course @relation(fields: [courseId],references: [id])

 academicDepartmentId String
 academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])

 semesterRegistrationId String
 semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId],references: [id])

 offeredCourseSection OfferedCourseSection[]
 studentRegistrationCourse StudentRegistrationCourse[]

 @@map("offered_course")
}


model OfferedCourseSection{
   id String @id @default(uuid())
   title String
   maxCapacity Int
   currentlyEnrolledStudent Int @default(0)
   createdAt DateTime @default(now())     
   updatedAt DateTime @updatedAt

   offeredCourseId String
   offeredCourse OfferedCourse @relation(fields: [offeredCourseId],references: [id])

   semesterRegistrationId String
   semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId],references: [id])

   offeredCourseClassSchedule OfferedCourseClassSchedule[]
   studentRegistrationCourse StudentRegistrationCourse[]
   @@map("offered_course_section")
}

model OfferedCourseClassSchedule {
   id String @id @default(uuid())
   startTime String
   endTime String
   dayOfWeek WeekDays @default(Saturday)
   createdAt DateTime @default(now())     
   updatedAt DateTime @updatedAt

   offeredCourseSectionId String
   offerCourseSection OfferedCourseSection @relation(fields: [offeredCourseSectionId],references: [id])

   semesterRegistrationId String
   semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId],references: [id])

   roomId String
   room Room @relation(fields: [roomId], references: [id])

   facultyId String
   faculty Faculty @relation(fields: [facultyId],references: [id])

   @@map("offered_course_class_schedule")
}

enum WeekDays {
  Saturday
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
}

model StudentSemesterRegistration {
  id String @id @default(uuid())
  isConfirmed Boolean? @default(false)
  totalCreditTaken Int? @default(0)
  createdAt DateTime @default(now())     
  updatedAt DateTime @updatedAt

  studentId String
  student Student @relation(fields: [studentId],references: [id])

  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId],references: [id])

  @@map("student_semester_registration")

}

model StudentRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId],references: [id])

  studentId String
  student Student @relation(fields: [studentId],references: [id])

  offeredCourseId String
  offeredCourse OfferedCourse @relation(fields: [offeredCourseId],references: [id])
   
  offeredCourseSectionId String
  offeredCourseSection OfferedCourseSection @relation(fields: [offeredCourseSectionId],references: [id])
  
  @@id([semesterRegistrationId,studentId,offeredCourseId])

  @@map("student_registration_course")

}

model StudentEnrollerdCourse {
  id String @id @default(uuid())
  createdAt DateTime @default(now())     
  updatedAt DateTime @updatedAt

  studentId String
  student Student @relation(fields: [studentId],references: [id])

  courseId String
  course Course @relation(fields: [courseId],references: [id])

  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])

  grade String?
  point Float? @default(0)
  totalMarks Int @default(0)
  status  StudentEnrolledCourseStatus? @default(ONGOING)

  studentEnrolledCourseMark StudentEnrolledCourseMark[]
}

enum StudentEnrolledCourseStatus {
  ONGOING
  COMPLETED
  WITHDRAWN
}

model StudentEnrolledCourseMark {
  id String @id @default(uuid())
  createdAt DateTime @default(now())     
  updatedAt DateTime @updatedAt
  studentId String
  student Student @relation(fields: [studentId],references: [id])
  studentEnrolledCourseId String
  studentEnrolledCourse StudentEnrollerdCourse @relation(fields: [studentEnrolledCourseId],references: [id])
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])

  grade String? 
  marks Int ?
  examType ExamType? @default(MIDTERM)

  @@map("student_enrolled_course_mark")
}
enum ExamType {
  MIDTERM
  FINAL
}

model StudentSemesterPayment {
  id String @id @default(uuid())
  createdAt DateTime @default(now())     
  updatedAt DateTime @updatedAt
  studentId String
  student Student @relation(fields: [studentId],references: [id])
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
  fullPaymentAmount Int? @default(0)
  partialPaymentAmount Int? @default(0)
  totalPaidAmount Int? @default(0)
  paymentStatus PaymentStatus? @default(PENDING)

  @@map("student_semester_payment")
}

enum PaymentStatus {
  PENDING
  PARTIAL_PAID
  FULL_PAID
}